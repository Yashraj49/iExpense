
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct ContentView : view {
var body : someView {

}
}

^
|

That all works: SwiftUI is smart enough to understand that one object contains all our data, and will update the UI when either value changes. Behind the scenes, what’s actually happening is that each time a value inside our struct changes the whole struct changes – it’s like a new user every time we type a key for the first or last name. That might sound wasteful, but it’s actually extremely fast.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

there were two important differences I mentioned. First, that structs always have unique owners, whereas with classes multiple things can point to the same value. And second, that classes don’t need the mutating keyword before methods that change their properties, because you can change properties of constant classes.

 what this means is that if we have two SwiftUI views and we send them both the same struct to work with, they actually each have a unique copy of that struct; if one changes it, the other won’t see that change. On the other hand, if we create an instance of a class and send that to both views, they will share changes.

For SwiftUI developers, what this means is that if we want to share data between multiple views – if we want two or more views to point to the same data so that when one changes they all get those changes – we need to use classes rather than structs.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


When we use @State, we’re asking SwiftUI to watch a property for changes. So, if we change a string, flip a Boolean, add to an array, and so on, the property has changed and SwiftUI will re-invoke the body property of the view.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Classes don’t need the mutating keyword, because even if the class instance is marked as constant Swift can still modify variable properties.

 that all sounds terribly theoretical, but here’s the twist: now that User is a class the property itself isn’t changing, so @State doesn’t notice anything and can’t reload the view. Yes, the values inside the class are changing, but @State doesn’t monitor those, so effectively what’s happening is that the values inside our class are being changed but the view isn’t being reloaded to reflect that change.

it’s time to leave @State behind. Instead we need a more powerful property wrapper called @StateObject

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

If you want to use a class with your SwiftUI data – which you will want to do if that data should be shared across more than one view – then SwiftUI gives us three property wrappers that are useful: @StateObject, @ObservedObject, and @EnvironmentObject.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Our User class has two properties: firstName and lastName. Whenever either of those two changes, we want to notify any views that are watching our class that a change has happened so they can be reloaded. We can do this using the @Published property observer

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@Published is more or less half of @State: it tells Swift that whenever either of those two properties changes, it should send an announcement out to any SwiftUI views that are watching that they should reload.

How do those views know which classes might send out these notifications? That’s another property wrapper, @StateObject, which is the other half of @State – it tells SwiftUI that we’re creating a new class instance that should be watched for any change announcements.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Now that we’re using @StateObject, our code will no longer compile. It’s not a problem, and in fact it’s expected and easy to fix: the @StateObject property wrapper can only be used on types that conform to the ObservableObject protocol. This protocol has no requirements, and really all it means is “we want other things to be able to monitor this for changes.”

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

As you’ve seen, rather than just using @State to declare local state, we now take three steps:


Make a class that conforms to the ObservableObject protocol.


Mark some properties with @Published so that any views using the class get updated when they change.


Create an instance of our class using the @StateObject property wrapper.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

When you want to use a class instance elsewhere – when you’ve created it in view A using @StateObject and want to use that same object in view B – you use a slightly different property wrapper called @ObservedObject. That’s the only difference: when creating the shared data use @StateObject, but when you’re just using it in a different view you should use @ObservedObject instead.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

There are several ways of showing views in SwiftUI, and one of the most basic is a sheet: a new view presented on top of our existing one. On iOS this automatically gives us a card-like presentation where the current view slides away into the distance a little and the new view animates in on top.
                        Sheets work much like alerts, in that we don’t present them directly with code such as mySheet.present() or similar. Instead, we define the conditions under which a sheet should be shown, and when those conditions become true or false the sheet will either be presented or dismissed respectively.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

we show alerts using isPresented with a two-way binding to our state property, and we use something almost identical here: sheet(isPresented:).

sheet() is a modifier just like alert()

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

To dismiss another view we need another property wrapper – and yes, I realize that so often the solution to a problem in SwiftUI is to use another property wrapper.

this new one is called @Environment, and it allows us to create properties that store values provided to us externally. Is the user in light mode or dark mode? Have they asked for smaller or larger fonts? What timezone are they on? All these and more are values that come from the environment, and in this instance we’re going to ask the environment to dismiss our view.

Yes, we need to ask the environment to dismiss our view, because it might have been presented in any number of different ways. So, we’re effectively saying “hey, figure out how my view was presented, then dismiss it appropriately.”

To try it out add this property to SecondView, which creates a property called dismiss based on a value from the environment

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class User : ObservableObject {
   @Published var firstName = "Bilbo"
   @Published var lastName = "Baggins"
}

struct SecondView: View {
    let name: String
    
    @Environment(\.dismiss) var dismiss
    
    var body: some View {
        Button("Dismiss") {
            dismiss()
        }
    }
}

struct ContentView: View {
    
    @State private var showingSheet = false
    
    var body: some View {
        Button("Show Sheet") {
            showingSheet.toggle()
           
            
        }.sheet(isPresented: $showingSheet) {
            SecondView(name: "@Yashrajj_")
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


struct ContentView: View {
    @State private var numbers = [Int]()
    @State private var currentNumber = 1

    var body: some View {
        VStack {
            List(numbers, id: \.self) {
                Text("Row \($0)")
            }

            Button("Add Number") {
                numbers.append(currentNumber)
                currentNumber += 1
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UserDefaults is perfect for storing things like when the user last launched the app, which news story they last read, or other passively collected information. Even better, SwiftUI can often wrap up UserDefaults inside a nice and simple property wrapper called @AppStorage – it only supports a subset of functionality right now, but it can be really helpful.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
As this is clearly A Very Important App, we want to save the number of taps that the user made, so when they come back to the app in the future they can pick up where they left off.

To make that happen, we need to write to UserDefaults inside our button’s action closure. So, add this after the tapCount += 1 line:

UserDefaults.standard.set(self.tapCount, forKey: "Tap")
In just that single line of code you can see three things in action:

We need to use UserDefaults.standard. This is the built-in instance of UserDefaults that is attached to our app, but in more advanced apps you can create your own instances. For example, if you want to share defaults across several app extensions you might create your own UserDefaults instance.
There is a single set() method that accepts any kind of data – integers, Booleans, strings, and more.
We attach a string name to this data, in our case it’s the key “Tap”. This key is case-sensitive, just like regular Swift strings, and it’s important – we need to use the same key to read the data back out of UserDefaults.


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct ContentView: View {
    @AppStorage("tapCount") private var tapCount = 0

    var body: some View {
        Button("Tap count: \(tapCount)") {
            tapCount += 1
        }
    }
}
Again, there are three things I want to point out in there:

Our access to the UserDefaults system is through the @AppStorage property wrapper. This works like @State: when the value changes, it will reinvoked the body property so our UI reflects the new data.
We attach a string name, which is the UserDefaults key where we want to store the data. I’ve used “tapCount”, but it can be anything at all – it doesn’t need to match the property name.
The rest of the property is declared as normal, including providing a default value of 0. That will be used if there is no existing value saved inside UserDefaults.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

When working with data like this, Swift gives us a fantastic protocol called Codable: a protocol specifically for archiving and unarchiving data, which is a fancy way of saying “converting objects into plain text and back again.”

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


The Codable protocol doesn’t require that we use JSON, and in fact other formats are available, but it is by far the most common. In this instance, we don’t actually care what sort of data is used, because it’s just going to be stored in UserDefaults.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

That data constant is a new data type called, perhaps confusingly, Data. It’s designed to store any kind of data you can think of, such as strings, images, zip files, and more. Here, though, all we care about is that it’s one of the types of data we can write straight into UserDefaults.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ContentView: View {
    
    @State private var user = User(firstName: "Taylor", lastName: "Swift")

    var body: some View {
        Button("Save User") {
            let encoder = JSONEncoder()

            if let data = try? encoder.encode(user) {
                UserDefaults.standard.set(data, forKey: "UserData")
            }
        }
            
        }
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
